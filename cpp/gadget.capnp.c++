// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: gadget.capnp

#include "gadget.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<49> b_b7ee4502ea68c3e0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    224, 195, 104, 234,   2,  69, 238, 183,
     13,   0,   0,   0,   1,   0,   1,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  70, 105, 101,
    108, 100,  69, 108, 101, 109, 101, 110,
    116,  82, 101, 112, 114, 101, 115, 101,
    110, 116,  97, 116, 105, 111, 110,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b7ee4502ea68c3e0 = b_b7ee4502ea68c3e0.words;
#if !CAPNP_LITE
static const uint16_t m_b7ee4502ea68c3e0[] = {0, 1};
static const uint16_t i_b7ee4502ea68c3e0[] = {0, 1};
const ::capnp::_::RawSchema s_b7ee4502ea68c3e0 = {
  0xb7ee4502ea68c3e0, b_b7ee4502ea68c3e0.words, 49, nullptr, m_b7ee4502ea68c3e0,
  0, 2, i_b7ee4502ea68c3e0, nullptr, nullptr, { &s_b7ee4502ea68c3e0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<53> b_8abf105b6c5df58d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    141, 245,  93, 108,  91,  16, 191, 138,
     13,   0,   0,   0,   1,   0,   0,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  84, 101, 114,
    109, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 114, 105,  97,  98, 108, 101,
     73, 100, 115,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 101, 102, 102, 105,  99, 105,
    101, 110, 116, 115,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8abf105b6c5df58d = b_8abf105b6c5df58d.words;
#if !CAPNP_LITE
static const uint16_t m_8abf105b6c5df58d[] = {1, 0};
static const uint16_t i_8abf105b6c5df58d[] = {0, 1};
const ::capnp::_::RawSchema s_8abf105b6c5df58d = {
  0x8abf105b6c5df58d, b_8abf105b6c5df58d.words, 53, nullptr, m_8abf105b6c5df58d,
  0, 2, i_8abf105b6c5df58d, nullptr, nullptr, { &s_8abf105b6c5df58d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<62> b_9c312e7f89b7f157 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     87, 241, 183, 137, 127,  46,  49, 156,
     13,   0,   0,   0,   1,   0,   0,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  67, 111, 110,
    115, 116, 114,  97, 105, 110, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
     97,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    141, 245,  93, 108,  91,  16, 191, 138,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    141, 245,  93, 108,  91,  16, 191, 138,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    141, 245,  93, 108,  91,  16, 191, 138,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9c312e7f89b7f157 = b_9c312e7f89b7f157.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9c312e7f89b7f157[] = {
  &s_8abf105b6c5df58d,
};
static const uint16_t m_9c312e7f89b7f157[] = {0, 1, 2};
static const uint16_t i_9c312e7f89b7f157[] = {0, 1, 2};
const ::capnp::_::RawSchema s_9c312e7f89b7f157 = {
  0x9c312e7f89b7f157, b_9c312e7f89b7f157.words, 62, d_9c312e7f89b7f157, m_9c312e7f89b7f157,
  1, 3, i_9c312e7f89b7f157, nullptr, nullptr, { &s_9c312e7f89b7f157, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<54> b_f2b12063699b8e27 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     39, 142, 155, 105,  99,  32, 177, 242,
     13,   0,   0,   0,   1,   0,   0,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110, 101, 100,  86,  97, 114,
    105,  97,  98, 108, 101, 115,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 114, 105,  97,  98, 108, 101,
     73, 100, 115,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 108, 101, 109, 101, 110, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f2b12063699b8e27 = b_f2b12063699b8e27.words;
#if !CAPNP_LITE
static const uint16_t m_f2b12063699b8e27[] = {1, 0};
static const uint16_t i_f2b12063699b8e27[] = {0, 1};
const ::capnp::_::RawSchema s_f2b12063699b8e27 = {
  0xf2b12063699b8e27, b_f2b12063699b8e27.words, 54, nullptr, m_f2b12063699b8e27,
  0, 2, i_f2b12063699b8e27, nullptr, nullptr, { &s_f2b12063699b8e27, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_e71a04084cc54a1a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     26,  74, 197,  76,   8,   4,  26, 231,
     13,   0,   0,   0,   1,   0,   0,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  67, 117, 115,
    116, 111, 109,  75, 101, 121,  86,  97,
    108, 117, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    107, 101, 121,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e71a04084cc54a1a = b_e71a04084cc54a1a.words;
#if !CAPNP_LITE
static const uint16_t m_e71a04084cc54a1a[] = {0, 1};
static const uint16_t i_e71a04084cc54a1a[] = {0, 1};
const ::capnp::_::RawSchema s_e71a04084cc54a1a = {
  0xe71a04084cc54a1a, b_e71a04084cc54a1a.words, 48, nullptr, m_e71a04084cc54a1a,
  0, 2, i_e71a04084cc54a1a, nullptr, nullptr, { &s_e71a04084cc54a1a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<92> b_8957f59f216dc578 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    120, 197, 109,  33, 159, 245,  87, 137,
     13,   0,   0,   0,   1,   0,   1,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      3,   0,   7,   0,   0,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  83, 116, 114,
    117,  99, 116, 117, 114, 101, 100,  71,
     97, 100, 103, 101, 116,  73, 110, 116,
    101, 114, 102,  97,  99, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 114, 105,  97,  98, 108, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 117,  99, 116, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    120, 197, 109,  33, 159, 245,  87, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     26,  74, 197,  76,   8,   4,  26, 231,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8957f59f216dc578 = b_8957f59f216dc578.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8957f59f216dc578[] = {
  &s_8957f59f216dc578,
  &s_e71a04084cc54a1a,
};
static const uint16_t m_8957f59f216dc578[] = {3, 2, 1, 0};
static const uint16_t i_8957f59f216dc578[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_8957f59f216dc578 = {
  0x8957f59f216dc578, b_8957f59f216dc578.words, 92, d_8957f59f216dc578, m_8957f59f216dc578,
  2, 4, i_8957f59f216dc578, nullptr, nullptr, { &s_8957f59f216dc578, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<102> b_bea209a4d3b01d5d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     93,  29, 176, 211, 164,   9, 162, 190,
     13,   0,   0,   0,   1,   0,   1,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  71,  97, 100,
    103, 101, 116,  73, 110, 115, 116,  97,
    110,  99, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   0,   0,   0,   3,   0,   1,   0,
    176,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172,   0,   0,   0,   3,   0,   1,   0,
    184,   0,   0,   0,   2,   0,   1,   0,
    103,  97, 100, 103, 101, 116,  78,  97,
    109, 101,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114,  97, 109, 101, 116, 101,
    114, 115,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     26,  74, 197,  76,   8,   4,  26, 231,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110,  99, 111, 109, 105, 110, 103,
     83, 116, 114, 117,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    120, 197, 109,  33, 159, 245,  87, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 117, 116, 103, 111, 105, 110, 103,
     83, 116, 114, 117,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    120, 197, 109,  33, 159, 245,  87, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 114, 101, 101,  86,  97, 114, 105,
     97,  98, 108, 101,  73, 100,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bea209a4d3b01d5d = b_bea209a4d3b01d5d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bea209a4d3b01d5d[] = {
  &s_8957f59f216dc578,
  &s_e71a04084cc54a1a,
};
static const uint16_t m_bea209a4d3b01d5d[] = {4, 0, 2, 3, 1};
static const uint16_t i_bea209a4d3b01d5d[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_bea209a4d3b01d5d = {
  0xbea209a4d3b01d5d, b_bea209a4d3b01d5d.words, 102, d_bea209a4d3b01d5d, m_bea209a4d3b01d5d,
  2, 5, i_bea209a4d3b01d5d, nullptr, nullptr, { &s_bea209a4d3b01d5d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_d5d92c1deda3a065 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    101, 160, 163, 237,  29,  44, 217, 213,
     13,   0,   0,   0,   1,   0,   0,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  82,  49,  67,
     83,  82, 101, 113, 117, 101, 115, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     93,  29, 176, 211, 164,   9, 162, 190,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d5d92c1deda3a065 = b_d5d92c1deda3a065.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d5d92c1deda3a065[] = {
  &s_bea209a4d3b01d5d,
};
static const uint16_t m_d5d92c1deda3a065[] = {0};
static const uint16_t i_d5d92c1deda3a065[] = {0};
const ::capnp::_::RawSchema s_d5d92c1deda3a065 = {
  0xd5d92c1deda3a065, b_d5d92c1deda3a065.words, 34, d_d5d92c1deda3a065, m_d5d92c1deda3a065,
  1, 1, i_d5d92c1deda3a065, nullptr, nullptr, { &s_d5d92c1deda3a065, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<53> b_e66b6d642cc9952c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     44, 149, 201,  44, 100, 109, 107, 230,
     13,   0,   0,   0,   1,   0,   0,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  82,  49,  67,
     83,  67, 104, 117, 110, 107,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 115, 116, 114,  97, 105,
    110, 116, 115,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     87, 241, 183, 137, 127,  46,  49, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 112, 114, 101, 115, 101, 110,
    116,  97, 116, 105, 111, 110,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    224, 195, 104, 234,   2,  69, 238, 183,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e66b6d642cc9952c = b_e66b6d642cc9952c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e66b6d642cc9952c[] = {
  &s_9c312e7f89b7f157,
  &s_b7ee4502ea68c3e0,
};
static const uint16_t m_e66b6d642cc9952c[] = {0, 1};
static const uint16_t i_e66b6d642cc9952c[] = {0, 1};
const ::capnp::_::RawSchema s_e66b6d642cc9952c = {
  0xe66b6d642cc9952c, b_e66b6d642cc9952c.words, 53, d_e66b6d642cc9952c, m_e66b6d642cc9952c,
  2, 2, i_e66b6d642cc9952c, nullptr, nullptr, { &s_e66b6d642cc9952c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_911e7215e6f25ee0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    224,  94, 242, 230,  21, 114,  30, 145,
     13,   0,   0,   0,   1,   0,   1,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  82,  49,  67,
     83,  82, 101, 115, 112, 111, 110, 115,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
    102, 114, 101, 101,  86,  97, 114, 105,
     97,  98, 108, 101,  73, 100,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     26,  74, 197,  76,   8,   4,  26, 231,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_911e7215e6f25ee0 = b_911e7215e6f25ee0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_911e7215e6f25ee0[] = {
  &s_e71a04084cc54a1a,
};
static const uint16_t m_911e7215e6f25ee0[] = {2, 0, 1};
static const uint16_t i_911e7215e6f25ee0[] = {0, 1, 2};
const ::capnp::_::RawSchema s_911e7215e6f25ee0 = {
  0x911e7215e6f25ee0, b_911e7215e6f25ee0.words, 68, d_911e7215e6f25ee0, m_911e7215e6f25ee0,
  1, 3, i_911e7215e6f25ee0, nullptr, nullptr, { &s_911e7215e6f25ee0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<86> b_c0e4cff46ab292c3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    195, 146, 178, 106, 244, 207, 228, 192,
     13,   0,   0,   0,   1,   0,   0,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110, 109, 101, 110, 116, 115,
     82, 101, 113, 117, 101, 115, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     93,  29, 176, 211, 164,   9, 162, 190,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 105, 116, 110, 101, 115, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     26,  74, 197,  76,   8,   4,  26, 231,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110,  99, 111, 109, 105, 110, 103,
     65, 115, 115, 105, 103, 110, 109, 101,
    110, 116, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     39, 142, 155, 105,  99,  32, 177, 242,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 112, 114, 101, 115, 101, 110,
    116,  97, 116, 105, 111, 110,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    224, 195, 104, 234,   2,  69, 238, 183,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c0e4cff46ab292c3 = b_c0e4cff46ab292c3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c0e4cff46ab292c3[] = {
  &s_b7ee4502ea68c3e0,
  &s_bea209a4d3b01d5d,
  &s_e71a04084cc54a1a,
  &s_f2b12063699b8e27,
};
static const uint16_t m_c0e4cff46ab292c3[] = {2, 0, 3, 1};
static const uint16_t i_c0e4cff46ab292c3[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_c0e4cff46ab292c3 = {
  0xc0e4cff46ab292c3, b_c0e4cff46ab292c3.words, 86, d_c0e4cff46ab292c3, m_c0e4cff46ab292c3,
  4, 4, i_c0e4cff46ab292c3, nullptr, nullptr, { &s_c0e4cff46ab292c3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_e148f7682011f583 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    131, 245,  17,  32, 104, 247,  72, 225,
     13,   0,   0,   0,   1,   0,   0,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110, 109, 101, 110, 116, 115,
     67, 104, 117, 110, 107,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
     97, 115, 115, 105, 103, 110, 101, 100,
     86,  97, 114, 105,  97,  98, 108, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     39, 142, 155, 105,  99,  32, 177, 242,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 112, 114, 101, 115, 101, 110,
    116,  97, 116, 105, 111, 110,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    224, 195, 104, 234,   2,  69, 238, 183,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e148f7682011f583 = b_e148f7682011f583.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e148f7682011f583[] = {
  &s_b7ee4502ea68c3e0,
  &s_f2b12063699b8e27,
};
static const uint16_t m_e148f7682011f583[] = {0, 1};
static const uint16_t i_e148f7682011f583[] = {0, 1};
const ::capnp::_::RawSchema s_e148f7682011f583 = {
  0xe148f7682011f583, b_e148f7682011f583.words, 51, d_e148f7682011f583, m_e148f7682011f583,
  2, 2, i_e148f7682011f583, nullptr, nullptr, { &s_e148f7682011f583, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<102> b_99c00f01c04ed08d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    141, 208,  78, 192,   1,  15, 192, 153,
     13,   0,   0,   0,   1,   0,   1,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  65, 115, 115,
    105, 103, 110, 109, 101, 110, 116, 115,
     82, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    156,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   0,   0,   0,   3,   0,   1,   0,
    176,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    168,   0,   0,   0,   3,   0,   1,   0,
    180,   0,   0,   0,   2,   0,   1,   0,
    102, 114, 101, 101,  86,  97, 114, 105,
     97,  98, 108, 101,  73, 100,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     26,  74, 197,  76,   8,   4,  26, 231,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 117, 116, 103, 111, 105, 110, 103,
     65, 115, 115, 105, 103, 110, 109, 101,
    110, 116, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     39, 142, 155, 105,  99,  32, 177, 242,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 112, 114, 101, 115, 101, 110,
    116,  97, 116, 105, 111, 110,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    224, 195, 104, 234,   2,  69, 238, 183,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_99c00f01c04ed08d = b_99c00f01c04ed08d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_99c00f01c04ed08d[] = {
  &s_b7ee4502ea68c3e0,
  &s_e71a04084cc54a1a,
  &s_f2b12063699b8e27,
};
static const uint16_t m_99c00f01c04ed08d[] = {4, 0, 1, 2, 3};
static const uint16_t i_99c00f01c04ed08d[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_99c00f01c04ed08d = {
  0x99c00f01c04ed08d, b_99c00f01c04ed08d.words, 102, d_99c00f01c04ed08d, m_99c00f01c04ed08d,
  3, 5, i_99c00f01c04ed08d, nullptr, nullptr, { &s_99c00f01c04ed08d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_a5c4c1f880e3ad57 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     87, 173, 227, 128, 248, 193, 196, 165,
     13,   0,   0,   0,   1,   0,   1,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      1,   0,   7,   0,   0,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  71,  97, 100,
    103, 101, 116,  82, 101, 113, 117, 101,
    115, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    109,  97, 107, 101,  82,  49,  67,  83,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    101, 160, 163, 237,  29,  44, 217, 213,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 107, 101,  65, 115, 115, 105,
    103, 110, 109, 101, 110, 116, 115,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    195, 146, 178, 106, 244, 207, 228, 192,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a5c4c1f880e3ad57 = b_a5c4c1f880e3ad57.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a5c4c1f880e3ad57[] = {
  &s_c0e4cff46ab292c3,
  &s_d5d92c1deda3a065,
};
static const uint16_t m_a5c4c1f880e3ad57[] = {1, 0};
static const uint16_t i_a5c4c1f880e3ad57[] = {0, 1};
const ::capnp::_::RawSchema s_a5c4c1f880e3ad57 = {
  0xa5c4c1f880e3ad57, b_a5c4c1f880e3ad57.words, 50, d_a5c4c1f880e3ad57, m_a5c4c1f880e3ad57,
  2, 2, i_a5c4c1f880e3ad57, nullptr, nullptr, { &s_a5c4c1f880e3ad57, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_88b49e0dd84cbe8f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    143, 190,  76, 216,  13, 158, 180, 136,
     13,   0,   0,   0,   3,   0,   0,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 135,   0,   0,   0,
    109,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  80,  97, 114,
    101, 110, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153, 220, 160, 229, 177, 104,   9, 149,
    126,  28, 156, 252, 223,   2,  28, 224,
     49,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21, 116,  55, 162, 172, 121,  53, 238,
    105, 138, 120,  30, 191, 155, 148, 152,
     29,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   7,   0,   0,   0,
     99, 111, 110, 115, 116, 114,  97, 105,
    110,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 115, 115, 105, 103, 110,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_88b49e0dd84cbe8f = b_88b49e0dd84cbe8f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_88b49e0dd84cbe8f[] = {
  &s_950968b1e5a0dc99,
  &s_98949bbf1e788a69,
  &s_e01c02dffc9c1c7e,
  &s_ee3579aca2377415,
};
static const uint16_t m_88b49e0dd84cbe8f[] = {1, 0};
const ::capnp::_::RawSchema s_88b49e0dd84cbe8f = {
  0x88b49e0dd84cbe8f, b_88b49e0dd84cbe8f.words, 39, d_88b49e0dd84cbe8f, m_88b49e0dd84cbe8f,
  4, 2, nullptr, nullptr, nullptr, { &s_88b49e0dd84cbe8f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_950968b1e5a0dc99 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    153, 220, 160, 229, 177, 104,   9, 149,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  80,  97, 114,
    101, 110, 116,  46,  99, 111, 110, 115,
    116, 114,  97, 105, 110,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 104, 117, 110, 107,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     44, 149, 201,  44, 100, 109, 107, 230,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_950968b1e5a0dc99 = b_950968b1e5a0dc99.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_950968b1e5a0dc99[] = {
  &s_e66b6d642cc9952c,
};
static const uint16_t m_950968b1e5a0dc99[] = {0};
static const uint16_t i_950968b1e5a0dc99[] = {0};
const ::capnp::_::RawSchema s_950968b1e5a0dc99 = {
  0x950968b1e5a0dc99, b_950968b1e5a0dc99.words, 33, d_950968b1e5a0dc99, m_950968b1e5a0dc99,
  1, 1, i_950968b1e5a0dc99, nullptr, nullptr, { &s_950968b1e5a0dc99, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_e01c02dffc9c1c7e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    126,  28, 156, 252, 223,   2,  28, 224,
     20,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  80,  97, 114,
    101, 110, 116,  46,  99, 111, 110, 115,
    116, 114,  97, 105, 110,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111, 107,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e01c02dffc9c1c7e = b_e01c02dffc9c1c7e.words;
#if !CAPNP_LITE
static const uint16_t m_e01c02dffc9c1c7e[] = {0};
static const uint16_t i_e01c02dffc9c1c7e[] = {0};
const ::capnp::_::RawSchema s_e01c02dffc9c1c7e = {
  0xe01c02dffc9c1c7e, b_e01c02dffc9c1c7e.words, 33, nullptr, m_e01c02dffc9c1c7e,
  0, 1, i_e01c02dffc9c1c7e, nullptr, nullptr, { &s_e01c02dffc9c1c7e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_ee3579aca2377415 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     21, 116,  55, 162, 172, 121,  53, 238,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  80,  97, 114,
    101, 110, 116,  46,  97, 115, 115, 105,
    103, 110,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 104, 117, 110, 107,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    131, 245,  17,  32, 104, 247,  72, 225,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ee3579aca2377415 = b_ee3579aca2377415.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ee3579aca2377415[] = {
  &s_e148f7682011f583,
};
static const uint16_t m_ee3579aca2377415[] = {0};
static const uint16_t i_ee3579aca2377415[] = {0};
const ::capnp::_::RawSchema s_ee3579aca2377415 = {
  0xee3579aca2377415, b_ee3579aca2377415.words, 33, d_ee3579aca2377415, m_ee3579aca2377415,
  1, 1, i_ee3579aca2377415, nullptr, nullptr, { &s_ee3579aca2377415, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_98949bbf1e788a69 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    105, 138, 120,  30, 191, 155, 148, 152,
     20,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  80,  97, 114,
    101, 110, 116,  46,  97, 115, 115, 105,
    103, 110,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111, 107,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_98949bbf1e788a69 = b_98949bbf1e788a69.words;
#if !CAPNP_LITE
static const uint16_t m_98949bbf1e788a69[] = {0};
static const uint16_t i_98949bbf1e788a69[] = {0};
const ::capnp::_::RawSchema s_98949bbf1e788a69 = {
  0x98949bbf1e788a69, b_98949bbf1e788a69.words, 33, nullptr, m_98949bbf1e788a69,
  0, 1, i_98949bbf1e788a69, nullptr, nullptr, { &s_98949bbf1e788a69, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_ca93c8da922da39c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    156, 163,  45, 146, 218, 200, 147, 202,
     13,   0,   0,   0,   3,   0,   0,   0,
    170, 246, 122, 185, 192, 193,  94, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 135,   0,   0,   0,
    113,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  71,  97, 100,
    103, 101, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15, 104, 235,  32,  94,  32,  70, 235,
     55, 119, 192, 243,  69,  35, 202, 181,
     49,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    133, 133, 140, 108, 174, 179,  49, 252,
    135, 214, 112, 244, 181, 113, 223, 165,
     29,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   7,   0,   0,   0,
    109,  97, 107, 101,  82,  49,  67,  83,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109,  97, 107, 101,  65, 115, 115, 105,
    103, 110, 109, 101, 110, 116, 115,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ca93c8da922da39c = b_ca93c8da922da39c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ca93c8da922da39c[] = {
  &s_a5df71b5f470d687,
  &s_b5ca2345f3c07737,
  &s_eb46205e20eb680f,
  &s_fc31b3ae6c8c8585,
};
static const uint16_t m_ca93c8da922da39c[] = {1, 0};
const ::capnp::_::RawSchema s_ca93c8da922da39c = {
  0xca93c8da922da39c, b_ca93c8da922da39c.words, 40, d_ca93c8da922da39c, m_ca93c8da922da39c,
  4, 2, nullptr, nullptr, nullptr, { &s_ca93c8da922da39c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_eb46205e20eb680f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     15, 104, 235,  32,  94,  32,  70, 235,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  71,  97, 100,
    103, 101, 116,  46, 109,  97, 107, 101,
     82,  49,  67,  83,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    101, 160, 163, 237,  29,  44, 217, 213,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108, 108, 101, 114,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    143, 190,  76, 216,  13, 158, 180, 136,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eb46205e20eb680f = b_eb46205e20eb680f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_eb46205e20eb680f[] = {
  &s_88b49e0dd84cbe8f,
  &s_d5d92c1deda3a065,
};
static const uint16_t m_eb46205e20eb680f[] = {1, 0};
static const uint16_t i_eb46205e20eb680f[] = {0, 1};
const ::capnp::_::RawSchema s_eb46205e20eb680f = {
  0xeb46205e20eb680f, b_eb46205e20eb680f.words, 48, d_eb46205e20eb680f, m_eb46205e20eb680f,
  2, 2, i_eb46205e20eb680f, nullptr, nullptr, { &s_eb46205e20eb680f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_b5ca2345f3c07737 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     55, 119, 192, 243,  69,  35, 202, 181,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  71,  97, 100,
    103, 101, 116,  46, 109,  97, 107, 101,
     82,  49,  67,  83,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    224,  94, 242, 230,  21, 114,  30, 145,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b5ca2345f3c07737 = b_b5ca2345f3c07737.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b5ca2345f3c07737[] = {
  &s_911e7215e6f25ee0,
};
static const uint16_t m_b5ca2345f3c07737[] = {0};
static const uint16_t i_b5ca2345f3c07737[] = {0};
const ::capnp::_::RawSchema s_b5ca2345f3c07737 = {
  0xb5ca2345f3c07737, b_b5ca2345f3c07737.words, 33, d_b5ca2345f3c07737, m_b5ca2345f3c07737,
  1, 1, i_b5ca2345f3c07737, nullptr, nullptr, { &s_b5ca2345f3c07737, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_fc31b3ae6c8c8585 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    133, 133, 140, 108, 174, 179,  49, 252,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  71,  97, 100,
    103, 101, 116,  46, 109,  97, 107, 101,
     65, 115, 115, 105, 103, 110, 109, 101,
    110, 116, 115,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    195, 146, 178, 106, 244, 207, 228, 192,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108, 108, 101, 114,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    143, 190,  76, 216,  13, 158, 180, 136,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fc31b3ae6c8c8585 = b_fc31b3ae6c8c8585.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fc31b3ae6c8c8585[] = {
  &s_88b49e0dd84cbe8f,
  &s_c0e4cff46ab292c3,
};
static const uint16_t m_fc31b3ae6c8c8585[] = {1, 0};
static const uint16_t i_fc31b3ae6c8c8585[] = {0, 1};
const ::capnp::_::RawSchema s_fc31b3ae6c8c8585 = {
  0xfc31b3ae6c8c8585, b_fc31b3ae6c8c8585.words, 49, d_fc31b3ae6c8c8585, m_fc31b3ae6c8c8585,
  2, 2, i_fc31b3ae6c8c8585, nullptr, nullptr, { &s_fc31b3ae6c8c8585, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a5df71b5f470d687 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    135, 214, 112, 244, 181, 113, 223, 165,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 100, 103, 101, 116,  46,  99,
     97, 112, 110, 112,  58,  71,  97, 100,
    103, 101, 116,  46, 109,  97, 107, 101,
     65, 115, 115, 105, 103, 110, 109, 101,
    110, 116, 115,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    141, 208,  78, 192,   1,  15, 192, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a5df71b5f470d687 = b_a5df71b5f470d687.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a5df71b5f470d687[] = {
  &s_99c00f01c04ed08d,
};
static const uint16_t m_a5df71b5f470d687[] = {0};
static const uint16_t i_a5df71b5f470d687[] = {0};
const ::capnp::_::RawSchema s_a5df71b5f470d687 = {
  0xa5df71b5f470d687, b_a5df71b5f470d687.words, 34, d_a5df71b5f470d687, m_a5df71b5f470d687,
  1, 1, i_a5df71b5f470d687, nullptr, nullptr, { &s_a5df71b5f470d687, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// FieldElementRepresentation
constexpr uint16_t FieldElementRepresentation::_capnpPrivate::dataWordSize;
constexpr uint16_t FieldElementRepresentation::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind FieldElementRepresentation::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FieldElementRepresentation::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Terms
constexpr uint16_t Terms::_capnpPrivate::dataWordSize;
constexpr uint16_t Terms::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Terms::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Terms::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Constraint
constexpr uint16_t Constraint::_capnpPrivate::dataWordSize;
constexpr uint16_t Constraint::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Constraint::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Constraint::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AssignedVariables
constexpr uint16_t AssignedVariables::_capnpPrivate::dataWordSize;
constexpr uint16_t AssignedVariables::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AssignedVariables::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AssignedVariables::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CustomKeyValue
constexpr uint16_t CustomKeyValue::_capnpPrivate::dataWordSize;
constexpr uint16_t CustomKeyValue::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CustomKeyValue::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CustomKeyValue::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// StructuredGadgetInterface
constexpr uint16_t StructuredGadgetInterface::_capnpPrivate::dataWordSize;
constexpr uint16_t StructuredGadgetInterface::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind StructuredGadgetInterface::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StructuredGadgetInterface::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GadgetInstance
constexpr uint16_t GadgetInstance::_capnpPrivate::dataWordSize;
constexpr uint16_t GadgetInstance::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GadgetInstance::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GadgetInstance::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// R1CSRequest
constexpr uint16_t R1CSRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t R1CSRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind R1CSRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* R1CSRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// R1CSChunk
constexpr uint16_t R1CSChunk::_capnpPrivate::dataWordSize;
constexpr uint16_t R1CSChunk::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind R1CSChunk::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* R1CSChunk::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// R1CSResponse
constexpr uint16_t R1CSResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t R1CSResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind R1CSResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* R1CSResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AssignmentsRequest
constexpr uint16_t AssignmentsRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t AssignmentsRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AssignmentsRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AssignmentsRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AssignmentsChunk
constexpr uint16_t AssignmentsChunk::_capnpPrivate::dataWordSize;
constexpr uint16_t AssignmentsChunk::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AssignmentsChunk::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AssignmentsChunk::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AssignmentsResponse
constexpr uint16_t AssignmentsResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t AssignmentsResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AssignmentsResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AssignmentsResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GadgetRequest
constexpr uint16_t GadgetRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t GadgetRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GadgetRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GadgetRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::Parent::ConstrainParams,  ::Parent::ConstrainResults>
Parent::Client::constrainRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Parent::ConstrainParams,  ::Parent::ConstrainResults>(
      0x88b49e0dd84cbe8full, 0, sizeHint);
}
::kj::Promise<void> Parent::Server::constrain(ConstrainContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gadget.capnp:Parent", "constrain",
      0x88b49e0dd84cbe8full, 0);
}
::capnp::Request< ::Parent::AssignParams,  ::Parent::AssignResults>
Parent::Client::assignRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Parent::AssignParams,  ::Parent::AssignResults>(
      0x88b49e0dd84cbe8full, 1, sizeHint);
}
::kj::Promise<void> Parent::Server::assign(AssignContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gadget.capnp:Parent", "assign",
      0x88b49e0dd84cbe8full, 1);
}
::kj::Promise<void> Parent::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x88b49e0dd84cbe8full:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("gadget.capnp:Parent", interfaceId);
  }
}
::kj::Promise<void> Parent::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return constrain(::capnp::Capability::Server::internalGetTypedContext<
           ::Parent::ConstrainParams,  ::Parent::ConstrainResults>(context));
    case 1:
      return assign(::capnp::Capability::Server::internalGetTypedContext<
           ::Parent::AssignParams,  ::Parent::AssignResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "gadget.capnp:Parent",
          0x88b49e0dd84cbe8full, methodId);
  }
}
#endif  // !CAPNP_LITE

// Parent
#if !CAPNP_LITE
constexpr ::capnp::Kind Parent::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Parent::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Parent::ConstrainParams
constexpr uint16_t Parent::ConstrainParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Parent::ConstrainParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Parent::ConstrainParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Parent::ConstrainParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Parent::ConstrainResults
constexpr uint16_t Parent::ConstrainResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Parent::ConstrainResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Parent::ConstrainResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Parent::ConstrainResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Parent::AssignParams
constexpr uint16_t Parent::AssignParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Parent::AssignParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Parent::AssignParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Parent::AssignParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Parent::AssignResults
constexpr uint16_t Parent::AssignResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Parent::AssignResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Parent::AssignResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Parent::AssignResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::Gadget::MakeR1CSParams,  ::Gadget::MakeR1CSResults>
Gadget::Client::makeR1CSRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Gadget::MakeR1CSParams,  ::Gadget::MakeR1CSResults>(
      0xca93c8da922da39cull, 0, sizeHint);
}
::kj::Promise<void> Gadget::Server::makeR1CS(MakeR1CSContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gadget.capnp:Gadget", "makeR1CS",
      0xca93c8da922da39cull, 0);
}
::capnp::Request< ::Gadget::MakeAssignmentsParams,  ::Gadget::MakeAssignmentsResults>
Gadget::Client::makeAssignmentsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Gadget::MakeAssignmentsParams,  ::Gadget::MakeAssignmentsResults>(
      0xca93c8da922da39cull, 1, sizeHint);
}
::kj::Promise<void> Gadget::Server::makeAssignments(MakeAssignmentsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gadget.capnp:Gadget", "makeAssignments",
      0xca93c8da922da39cull, 1);
}
::kj::Promise<void> Gadget::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xca93c8da922da39cull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("gadget.capnp:Gadget", interfaceId);
  }
}
::kj::Promise<void> Gadget::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return makeR1CS(::capnp::Capability::Server::internalGetTypedContext<
           ::Gadget::MakeR1CSParams,  ::Gadget::MakeR1CSResults>(context));
    case 1:
      return makeAssignments(::capnp::Capability::Server::internalGetTypedContext<
           ::Gadget::MakeAssignmentsParams,  ::Gadget::MakeAssignmentsResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "gadget.capnp:Gadget",
          0xca93c8da922da39cull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Gadget
#if !CAPNP_LITE
constexpr ::capnp::Kind Gadget::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Gadget::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Gadget::MakeR1CSParams
constexpr uint16_t Gadget::MakeR1CSParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Gadget::MakeR1CSParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Gadget::MakeR1CSParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Gadget::MakeR1CSParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Gadget::MakeR1CSResults
constexpr uint16_t Gadget::MakeR1CSResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Gadget::MakeR1CSResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Gadget::MakeR1CSResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Gadget::MakeR1CSResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Gadget::MakeAssignmentsParams
constexpr uint16_t Gadget::MakeAssignmentsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Gadget::MakeAssignmentsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Gadget::MakeAssignmentsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Gadget::MakeAssignmentsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Gadget::MakeAssignmentsResults
constexpr uint16_t Gadget::MakeAssignmentsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Gadget::MakeAssignmentsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Gadget::MakeAssignmentsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Gadget::MakeAssignmentsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



