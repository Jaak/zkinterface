namespace Gadget;

union Message {
    R1CSRequest,
    R1CSChunk,
    R1CSResponse,

    AssignmentsRequest,
    AssignmentsChunk,
    AssignmentsResponse,
}

table Root {
    message :Message;
}

root_type Root;


// == Types ==

// Variable ID = uint64
// Unique within a constraint system.
// Zero is a reserved special value.

/// Description of the representation or encoding of field elements.
/// If omitted, use a default representation:
/// name = "little-endian"
/// size = 32 bytes
table FieldElementRepresentation {
    /// The well-known name of the representation.
    name :string;

    /// The size of the representation of an element in bytes.
    size :uint32;
}

/// Terms in a R1CS vector.
table Terms {
    // The IDs of the variables to constrain.
    variable_ids :[uint64];

    /// Contiguous coefficient representations in the same order as variable_ids.
    coefficients :[ubyte];
}

/// A low-level R1CS constraint between variables.
/// Targets the generic mechanisms that build circuits.
/// Intended to be sent in sequences.
table Constraint {
    // (A) * (B) = (C)
    a :Terms;
    b :Terms;
    c :Terms;
}

/// Low-level assignments to variables.
/// Targets the generic mechanisms that prepare proofs.
table AssignedVariables {
    /// The IDs of the variables being assigned to.
    variable_ids :[uint64];

    /// Contiguous element representations in the same order as variable_ids.
    elements     :[ubyte];
}

/// Generic key-value for miscellaneous attributes.
table CustomKeyValue {
    key   :string;
    value :[ubyte];
}

/// A high-level structure of variables.
/// Define the interface between a gadget and the rest of the circuit.
/// In gadget composition, the parent provides these structures to its child.
/// A gadget should document what structures it can accept.
table StructuredConnection {
    /// Variables allocated by the caller to use as connections to the gadget.
    variable_ids :[uint64];

    /// Optionally recursive type.
    /// If used, the field `variable_ids` must be null.
    structures   :[StructuredConnection];

    /// Name of the connection.
    name         :string;

    /// Any custom information.
    info         :[CustomKeyValue];
}

/// An instance of a gadget as part of a circuit.
table GadgetInstance {

    /// Which gadget to instantiate.
    /// Allows a library to provide multiple gadgets.
    gadget_name          :string;

    /// Any parameter that may influence the instance behavior.
    /// Parameters can be standard, conventional, or specific to a gadget.
    parameters           :[CustomKeyValue];

    /// Structure of variables that must be assigned by the calling parent.
    incoming_connections :StructuredConnection;

    /// Structure of variables that must be assigned by the called gadget.
    /// There may be no outgoing variables if the gadget represents a pure assertion.
    outgoing_connections :StructuredConnection;

    /// First free variable ID. The instance can allocate IDs greater or equal.
    free_variable_id     :uint64;
}


// == Messages for Instantiation ==

/// Request to build an instance.
table R1CSRequest {
    /// All details necessary to construct the instance.
    /// The same instance parameter must be provided in the corresponding AssignmentsRequest.
    instance :GadgetInstance;
}

/// Report all constraints in one or more chunks.
table R1CSChunk {
    /// Constraints to add.
    constraints    :[Constraint];

    /// The representation used for the constraints.
    representation :FieldElementRepresentation;
}

/// Response after the instantiation is complete.
table R1CSResponse {
    /// A variable ID greater than all IDs allocated by the instance.
    free_variable_id :uint64;

    /// Any info that may be useful to the calling parent.
    info             :[CustomKeyValue];

    /// An error message. Null if no error.
    error            :string;
}


// == Messages for Proving ==

/// Request assignments computed from a witness.
table AssignmentsRequest {
    /// All details necessary to construct the instance.
    /// The same instance parameter must be provided as in the corresponding R1CSRequest.
    instance             :GadgetInstance;

    /// Any info that may be useful to the gadget to compute its assignments.
    witness              :[CustomKeyValue];

    /// The values that the parent assigned to `instance.incomingConnections`.
    incoming_assignments :AssignedVariables;

    /// The representation used for the incomingAssignments.
    representation       :FieldElementRepresentation;
}

/// Report local and outgoing assignments in one or more chunks.
table AssignmentsChunk {
    /// Assignments computed by the gadgets.
    assigned_variables :AssignedVariables;

    /// The representation used for the assignments.
    representation     :FieldElementRepresentation;
}

/// Response after all assignments have been reported.
table AssignmentsResponse {
    /// A variable ID greater than all IDs allocated by the instance.
    free_variable_id     :uint64;

    /// Any info that may be useful to the calling parent.
    info                 :[CustomKeyValue];

    /// The values that the gadget assigned to `instance.outgoingConnections`.
    /// Intentionally redundant with AssignmentsChunk to allow handling
    /// the outgoing variables separately from the bulk of local variables assignments.
    outgoing_assignments :AssignedVariables;

    /// The representation used for the outgoingAssignments.
    representation       :FieldElementRepresentation;

    /// An error message. Null if no error.
    error                :string;
}
