// This is a FlatBuffers schema.
// See https://google.github.io/flatbuffers/

namespace zkinterface;

/// The messages that the caller and gadget can exchange.
union Message {
    Circuit,
    R1CSConstraints,
    Witness,
}

/// A description of the connection of a circuit or sub-circuit.
/// This can be a complete circuit ready for proving,
/// or a part of a circuit being built.
table Circuit {
    /// Variables to use as connection to the sub-circuit.
    /// - Variables to use as input connections to the gadget.
    /// - Or variables to use as output connections from the gadget.
    /// - Variables are allocated by the sender of this message.
    /// - The same structure must be provided for R1CS and witness generation.
    connections         :Variables;

    /// First variable ID free after this connection.
    /// A variable ID greater than all IDs allocated by the sender of this message.
    /// The recipient of this message can allocate new IDs greater than `free_variable_id`.
    free_variable_id :uint64;

    // Fields below are required to call a backend or a gadget,
    // but optional in the response from a gadget.

    /// Whether constraints should be generated.
    r1cs_generation       :bool;

    /// Whether an witness should be generated.
    /// Provide witness values to the gadget.
    witness_generation :bool;

    /// The order of the field used by the current system.
    /// A BigInt.
    field_order             :[ubyte];

    /// Optional: Any static parameter that may influence the instance
    /// construction. Parameters can be standard, conventional, or custom.
    /// Example: function_name, if a gadget supports multiple function variants.
    /// Example: the depth of a Merkle tree.
    /// Counter-example: a Merkle path is not configuration (rather witness).
    configuration           :[KeyValue];
}

    /// Generic key-value for custom attributes.
    table KeyValue {
        key   :string;
        value :[ubyte];
    }

/// Report constraints to be added to the constraints system.
/// To send to the stream of constraints.
table R1CSConstraints {
    constraints    :[BilinearConstraint];
}

    /// An R1CS constraint between variables.
    table BilinearConstraint {
        // (A) * (B) = (C)
        linear_combination_a :Variables;
        linear_combination_b :Variables;
        linear_combination_c :Variables;
    }

/// Report local assignments computed by the gadget.
/// To send to the stream of assigned variables.
/// Does not include input and output variables.
table Witness {
    values :Variables;
}

    /// Concrete variable values.
    /// Used for linear combinations and assignments.
    table Variables {
        /// The IDs of the variables being assigned to.
        variable_ids   :[uint64];

        /// Optional: Field elements assigned to variables.
        /// Contiguous BigInts in the same order as variable_ids.
        ///
        /// The field in use is defined in `instance.field_order`.
        ///
        /// The size of an element representation is determined by:
        ///     element size = elements.length / variable_ids.length
        ///
        /// The element representation may be truncated and therefore shorter
        /// than the canonical representation. Truncated bytes are treated as zeros.
        values         :[ubyte];

        /// Optional: Any complementary info that may be useful to the recipient.
        /// Example: a Merkle authentication path.
        info                   :[KeyValue];
    }

    // type Variable ID = uint64
    //
    // IDs must be unique within a constraint system.
    // Zero is a reserved special value.

    // type BigInt
    //
    // Big integers are represented as canonical little-endian byte arrays.
    // Multiple big integers can be concatenated in a single array.
    //
    // Evolution plan:
    // If a different representation of elements is to be supported in the future,
    // it should use new fields, and omit the current canonical fields.
    // This will allow past implementations to detect whether they are compatible.


// All message types are encapsulated in the FlatBuffers root table.
table Root {
    message :Message;
}
root_type Root;

// When storing messages to files, this extension and identifier should be used.
file_extension "zkif";
file_identifier "zkif"; // a.k.a. magic bytes.

// Message framing:
//
// All messages must be prefixed by the size of the message,
// not including the prefix, as a 4-bytes little-endian unsigned integer.
